<head>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheets/loans.css">
    <link rel="stylesheet" href="/stylesheets/nav.css">
    <!-- DataTables -->
    <link rel="stylesheet" href="/datatables/datatables.css">
    <link rel="stylesheet" href="/bootstrap/bootstrap.min.css">

</head>
<body>
    <div class="maincontainer">
        <%- include('../includes/nav', { path: path }) %>
        
        <div class="loans">
            <%- include('welcomeHeader', { data: data }) %> <!-- Pass 'data' here -->
            <data class="second_container">
                <div class="tablecontainer">
                    <table id="loansTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Borrower ID</th>
                                <th>Name</th>
                                <th>Amount</th>
                                <th>Interest</th>
                                <th>Term</th>
                                <th>Total</th>
                                <th>Monthly</th>
                                <th>Remaining</th>
                                <th>Due Date</th>
                                <th>End Due Date</th>
                                <th>Status</th>
                                <th>Updated</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </data>
        </div>
        <div class="add-loans-container" style="width: 100vw; height: 100vh; background-color: rgba(0, 0, 0, 0.5); position: fixed;">
            <form id="edit-LoansForm" style="display: none; min-width: 400px !important;" class="form">
                <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center;">
                    <p class="title" style="margin: 0;">Edit Loans</p>
                    <button type="button" class="close btn btn-danger" style="margin: 0; height: auto; font-size: 10px;">
                        <svg class="w-[40px] h-[40px] text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M6 18 17.94 6M18 18 6.06 6"/>
                      </svg>
                      Close
                      </button>
                </div>    
                
                <div class="flex" style="gap: 0.3rem; width: 100%;">
                    <label style="display: none;">
                        <input readonly name="loanID" placeholder="" type="number" class="input" 
                               required step="1" title="Only integers are allowed.">
                        <span>Loan ID</span>
                      </label>   

                    <label style="flex: 0 0 30%;">
                      <input readonly name="borrowerid" placeholder="" type="number" class="input" 
                             required step="1" title="Only integers are allowed.">
                      <span>Borrower ID</span>
                    </label>                    
                  
                    <label style="flex: 1;">
                      <input required name="FullName" placeholder="" type="text" class="input" 
                             pattern="^[^\d]*$" title="Numbers are not allowed.">
                      <span>Name</span>
                    </label>    
                  </div>
                  
            
                <label>
                    <span style="padding-bottom: 3px; font-size: 14px;">₱</span>
                    <input style="padding-left: 30px;" name="loanamount" placeholder="" type="number" class="input" 
                           required step="1" title="Only integers are allowed.">
                    <span style="font-size: 10px;">Loan Amount</span>
                </label>    

                <label>
                    <span style="padding-bottom: 3px; font-size: 14px;">₱</span>
                    <input style="padding-left: 30px;" name="remaining" placeholder="" type="text" class="input">
                    <span style="font-size: 10px;" >Remaining</span>
                </label>   

                <label>
                    <input name="term" placeholder="" type="number" class="input" 
                           required step="1" title="Only integers are allowed.">
                    <span>Term (Month)</span>
                </label>                  

                <div class="flex">
                    <label>
                        <input name="interest" placeholder="" type="number" class="input" 
                            required step="0.01" title="Decimal values are allowed.">
                        <span>Interest</span>
                    </label>  
                    <label>
                        <span style="padding-bottom: 3px; font-size: 14px;">₱</span>
                        <input style="padding-left: 30px;" name="monthly" placeholder="" type="text" class="input">
                        <span style="font-size: 10px;">Monthly</span>
                    </label>                    
                    <label>
                        <span style="padding-bottom: 3px; font-size: 14px;">₱</span>
                        <input style="padding-left: 30px;" name="total" placeholder="" type="number" class="input" 
                            required step="0.01" title="Decimal values are allowed.">
                        <span style="font-size: 10px;">Total</span>
                    </label>  
                </div>  

                <label>
                    <input name="due_date" placeholder="" type="date" class="input" 
                           required title="Select a due date.">
                    <span>Due Date</span>
                </label>                  
                <label>
                    <input name="end_due_date" placeholder="" type="date" class="input" 
                           required title="Select an end due date.">
                    <span>End Due Date</span>
                </label>
                
                <!-- Example single danger button -->
                <div style="display: flex; flex-direction: column; gap: 0px; margin: 0; padding: 0;">
                    <p style="font-size: 0.7rem; font-weight: 600; color: grey; margin: 0; padding: 0;">Select</p>
                    <div class="btn-group" style="display: block;">
                      <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" id="dropdownButtonStatus">
                        Select
                      </button>
                      <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="updateDropdown('Pending')">Pending</a></li>
                        <li><a class="dropdown-item" href="#" onclick="updateDropdown('Approved')">Approved</a></li>
                        <li><a class="dropdown-item" href="#" onclick="updateDropdown('Rejected')">Rejected</a></li>
                      </ul>
                    </div>
                    <script>
                        function updateDropdown(value) {
                            document.getElementById("dropdownButtonStatus").textContent = value;
                        }
                    </script>
                  </div>
                  </script>                  
                <button class="submit">Update</button>
            </form>

            <form id="adjust-LoansForm" style="display: none; min-width: 400px !important;" class="form">
                <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center;">
                    <p class="title" style="margin: 0;">Loan Payment</p>
                    <button type="button" class="close btn btn-danger" style="margin: 0; height: auto; font-size: 10px;">
                        <svg class="w-[40px] h-[40px] text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M6 18 17.94 6M18 18 6.06 6"/>
                      </svg>
                      Close
                      </button>
                </div>    
                
                <div class="flex" style="gap: 0.3rem; width: 100%;">
                    <label style="display: none;">
                        <input readonly name="loanID" placeholder="" type="number" class="input" 
                               required step="1" title="Only integers are allowed.">
                        <span>Loan ID</span>
                      </label>   

                    <label style="flex: 0 0 30%;">
                      <input readonly name="borrowerid" placeholder="" type="number" class="input" 
                             required step="1" title="Only integers are allowed.">
                      <span>Borrower ID</span>
                    </label>                    
                  
                    <label style="flex: 1;">
                      <input readonly required name="FullName" placeholder="" type="text" class="input" 
                             pattern="^[^\d]*$" title="Numbers are not allowed.">
                      <span>Name</span>
                    </label>    
                  </div>

                <label>
                    <span style="padding-bottom: 3px; font-size: 14px;">₱</span>
                    <input readonly required style="padding-left: 30px;" name="remaining" placeholder="" type="text" class="input">
                    <span style="font-size: 10px;">Remaining</span>
                </label>   
                <label>
                    <span style="padding-bottom: 3px; font-size: 14px;">₱</span>
                    <input required readonly style="padding-left: 30px;" name="monthly" placeholder="" type="text" class="input">
                    <span style="font-size: 10px;">Monthly</span>
                </label>   
                <label>
                    <span style="padding-bottom: 3px; font-size: 14px;">₱</span>
                    <input style="padding-left: 30px;" name="payment" placeholder="" type="number" class="input" 
                        required step="0.01" title="Decimal values are allowed.">
                    <span style="font-size: 10px;">Payment</span>
                </label>  

                <label>
                    <input name="mode" placeholder="" type="text" class="input" 
                        required step="0.01" title="Text only">
                    <span style="font-size: 10px;">Mode of Payment</span>
                </label>  

                <button class="submit">Pay now</button>

            </form>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="deleteModalCenter" tabindex="-1" role="dialog" aria-labelledby="deleteModalCenterCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title" id="deleteModalCenterLongTitle">Delete Loans?</h5>
                </div>
                <div class="modal-body">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteLoanBtn">Delete</button>
                </div>
            </div>
            </div>
        </div>
    </div>

    <script src="/datatables/jquery.js"></script>
    <script src="/datatables/datatables.js"></script>
    <script src="/bootstrap/bootstrap.bundle.min.js"></script>
    <script src="/datatables/dataTables.buttons.js"></script>
    <script src="/datatables/buttons.dataTables.js"></script>
    <script src="/datatables/pdfmake.min.js"></script>
    <script src="/datatables/vfs_fonts.js"></script>
    <script src="/datatables/buttons.html5.min.js"></script>


    <script>
        let loans = JSON.parse(`<%- JSON.stringify(loans) %>`);

        const Loans_container = document.querySelector('.add-loans-container');
        const addLoansForm = document.getElementById('addLoansForm');
        const editLoansForm = document.getElementById('editLoansForm');
        const adjustpaymentForm = document.querySelector('#adjust-LoansForm');

        console.log(loans);
        $(document).ready( function () {
            // $('#loansTable').DataTable({
            //     pageLength: 10,           // Show exactly 10 entries per page
            //     paging: true,             // Enable pagination
            //     scrollX: true,            // Keep horizontal scroll if table is wide
            //     order: [[0, 'desc']],
            //     drawCallback: function () {
            //         $('.dropdown-toggle').dropdown(); // Re-init Bootstrap dropdowns
            //     },
            //     columnDefs: [
            //         { width: "20%", targets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] }, // 12 columns
            //         { width: "200px", targets: 13 } // last column
            //     ]

            // });

            let loanstable = $('#loansTable').DataTable({
                    pageLength: 10,
                    paging: true,
                    scrollX: true,
                    order: [[0, 'desc']],
                    layout: {
                        topStart: [
                            {
                                buttons: [
                                    {
                                        extend: 'copy',
                                        className: 'btn btn-secondary btn-sm me-2',
                                        exportOptions: {
                                            columns: ':not(:last-child)' // exclude last column
                                        }
                                    },
                                    {
                                        extend: 'csv',
                                        className: 'btn btn-success btn-sm me-2',
                                        exportOptions: {
                                            columns: ':not(:last-child)'
                                        }
                                    },
                                    {
                                        extend: 'excel',
                                        className: 'btn btn-primary btn-sm me-2',
                                        exportOptions: {
                                            columns: ':not(:last-child)'
                                        }
                                    },
                                    {
                                        extend: 'pdf',
                                        className: 'btn btn-danger btn-sm me-2',
                                        exportOptions: {
                                            columns: ':not(:last-child)'
                                        }
                                    },
                                ]
                            },
                            'pageLength' // Add pageLength dropdown
                        ],
                        topEnd: ['search'], // Add search bar on the right
                        bottomEnd: ['info', 'paging'] // Add pagination and info text at the bottom
                    },
                    columnDefs: [
                    { width: "20%", targets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] }, // 12 columns
                    { width: "250px", targets: 13 } // last column
                ]
                });

            // Add Bootstrap styles to all DataTables buttons
            loanstable.buttons().each(function(button, index) {
                $(loanstable.buttons(index).nodes()).removeClass('dt-button').addClass('btn btn-primary btn-sm me-10');
            });

            // $('#loansTable').on('click', '.print-btn', function () {
            //     var row = $(this).closest('tr'); // Get the row that the Print button is in
            //     var rowContent = row.clone(); // Clone the row content to prepare it for printing
                
            //     // Open a new window or tab to print the content
            //     var printWindow = window.open('', '_blank');
            //     printWindow.document.write('<html><head><title>Report</title>');
                
            //     // Add CSS for better print styling
            //     printWindow.document.write(`
            //         <style>
            //             body {
            //                 font-family: Arial, sans-serif;
            //                 margin: 20px;
            //                 padding: 0;
            //             }
            //             table {
            //                 width: 100%;
            //                 border-collapse: collapse;
            //                 margin-top: 20px;
            //             }
            //             table th, table td {
            //                 padding: 8px;
            //                 text-align: left;
            //                 border: 1px solid #ddd;
            //             }
            //             table th {
            //                 background-color: #f4f4f4;
            //             }
            //             .print-header {
            //                 font-size: 18px;
            //                 text-align: center;
            //                 font-weight: bold;
            //                 margin-bottom: 20px;
            //             }
            //             .no-print {
            //                 display: none;
            //             }
            //         </style>
            //     `);
                
            //     printWindow.document.write('</head><body>');
                
            //     // Optional: Add a header before the table (you can customize the text)
            //     printWindow.document.write('<div class="print-header">Payment Report</div>');
                
            //     // Add the table header, excluding the last column (Actions column)
            //     var tableHeader = $('#loansTable thead tr').clone(); // Get the header row HTML
            //     tableHeader.find('th:last').remove(); // Remove the last column (Actions header)
                
            //     // Add the row content, excluding the last column (Actions data)
            //     rowContent.find('td:last').remove(); // Remove the last column (Actions data)
                
            //     // Write the table with the updated header and content
            //     printWindow.document.write('<table><thead>' + tableHeader.html() + '</thead><tbody>' + rowContent.html() + '</tbody></table>');
                
            //     printWindow.document.write('</body></html>');
            //     printWindow.document.close();
            //     printWindow.print(); // Trigger the print dialog
            // });

            $('#loansTable').on('click', '.print-btn', function () {
                var row = $(this).closest('tr'); // Get the row that the Print button is in
                var rowContent = row.clone(); // Clone the row content to prepare it for printing
                // Open a new window or tab to print the content
                var printWindow = window.open('', '_blank');
                printWindow.document.write('<html><head><title>Report</title>');
                
                // Add CSS for better print styling
                printWindow.document.write(`
                    <style>
                        body {
                            font-family: Arial, sans-serif;
                            margin: 20px;
                            padding: 0;
                        }
                        .print-header {
                            font-size: 18px;
                            text-align: center;
                            font-weight: bold;
                            margin-bottom: 20px;
                        }
                        .report-list {
                            list-style-type: none;
                            padding: 0;
                        }
                        .report-list li {
                            margin-bottom: 10px;
                        }
                        .report-list li span {
                            font-weight: bold;
                        }
                    </style>
                `);

                printWindow.document.write('</head><body>');
                
                // Optional: Add a header before the list (you can customize the text)
                printWindow.document.write('<div class="print-header">Loan Payment Report</div>');
                
                // Create a list for the row details
                var reportContent = '<ul class="report-list">';
                
                // Loop through the row data, excluding the last column (Actions)
                row.find('td').each(function(index) {
                    if (index !== row.find('td').length - 1) { // Exclude the last column
                        var columnHeader = $('#loansTable thead tr').find('th').eq(index).text(); // Get the header text for each column
                        var columnData = $(this).text();
                        reportContent += `<li><span>${columnHeader}:</span> ${columnData}</li>`;
                    }
                });

                reportContent += '</ul>';
                
                // Write the report content
                printWindow.document.write(reportContent);

                printWindow.document.write('</body></html>');
                printWindow.document.close();
                printWindow.print(); // Trigger the print dialog
            });

            //action btn
            const modalEl = document.getElementById('deleteModalCenter');
            const modalEdit = document.getElementById('editModalCenter');
            const editloanform = document.getElementById('edit-LoansForm');
            const loanscontainer = document.querySelector('.add-loans-container');
            const deleteModal = new bootstrap.Modal(modalEl);
            let originalremaining;

            $('#loansTable').on('click', '.edit-btn', function () {
                const row = $(this).closest('tr');
                const id = row.find('td').eq(0).text().trim();
                const borrower_id = row.find('td').eq(1).text().trim();
                const name = row.find('td').eq(2).text().trim();
                const amount = parseFloat(row.find('td').eq(3).text().trim().replace(/[₱,]/g, ''));
                const interest = parseFloat(row.find('td').eq(4).text().trim().replace(/%/g, '').replace(/,/g, ''));
                const term = parseFloat(row.find('td').eq(5).text().trim().replace(/Months/g, '').replace(/,/g, ''));
                const total = parseFloat(row.find('td').eq(6).text().trim().replace(/[₱,]/g, ''));
                const monthly = parseFloat(row.find('td').eq(7).text().trim().replace(/[₱,]/g, ''));
                const remaining = parseFloat(row.find('td').eq(8).text().trim().replace(/[₱,]/g, ''));

                const formatDate = (dateString) => {
                    const date = new Date(dateString);
                    if (isNaN(date)) return ''; // handles invalid dates
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    return `${year}-${month}-${day}`; // HTML date input format
                };

                const duedate = row.find('td').eq(9).text().trim();
                const endduedate = row.find('td').eq(10).text().trim();
                const status = row.find('td').eq(11).text().trim();

                loanscontainer.style.display = 'flex';
                editloanform.style.display = "flex";
                adjustpaymentForm.style.display = "none";
                requestAnimationFrame(() => {
                    loanscontainer.classList.add('show');
                });

                document.querySelector('#edit-LoansForm .title').textContent = "Edit Loan ID : " + id;
                editloanform.querySelector('input[name="loanID"]').value = id;
                editloanform.querySelector('input[name="borrowerid"]').value = borrower_id;
                editloanform.querySelector('input[name="FullName"]').value = name;
                editloanform.querySelector('input[name="loanamount"]').value = amount;
                editloanform.querySelector('input[name="monthly"]').value = monthly;
                editloanform.querySelector('input[name="remaining"]').value = remaining;
                editloanform.querySelector('input[name="term"]').value = term;
                editloanform.querySelector('input[name="interest"]').value = interest;
                editloanform.querySelector('input[name="total"]').value = total;
                editloanform.querySelector('input[name="due_date"]').value = formatDate(duedate);
                editloanform.querySelector('input[name="end_due_date"]').value = formatDate(endduedate);
                document.getElementById("dropdownButtonStatus").textContent = status;
            });

            $('#loansTable').on('click', '.delete-btn', function () {
                const row = $(this).closest('tr');
                const id = row.find('td').eq(0).text().trim();
                const borrower_id = row.find('td').eq(1).text().trim();
                const name = row.find('td').eq(2).text().trim();
                const amount = parseFloat(row.find('td').eq(3).text().trim().replace(/[₱,]/g, ''));
                const interest = parseFloat(row.find('td').eq(4).text().trim().replace(/%/g, '').replace(/,/g, ''));
                const term = parseFloat(row.find('td').eq(5).text().trim().replace(/Months/g, '').replace(/,/g, ''));
                const total = parseFloat(row.find('td').eq(6).text().trim().replace(/[₱,]/g, ''));
                const monthly = parseFloat(row.find('td').eq(7).text().trim().replace(/[₱,]/g, ''));
                const remaining = parseFloat(row.find('td').eq(8).text().trim().replace(/[₱,]/g, ''));

                const formatDate = (dateString) => {
                    const date = new Date(dateString);
                    if (isNaN(date)) return ''; // handles invalid dates
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    return `${year}-${month}-${day}`; // HTML date input format
                };

                const duedate = row.find('td').eq(9).text().trim();
                const endduedate = row.find('td').eq(10).text().trim();
                const status = row.find('td').eq(11).text().trim();

                
                console.log("Delete ID:", id);
                modalEl.querySelector('.modal-body').innerHTML = 
                    `<div><strong>ID:</strong> ${id}</div>
                    <div><strong>Borrower ID:</strong> ${borrower_id}</div>
                    <div><strong>Full Name:</strong> ${name}</div>
                    <div><strong>Amount:</strong> ₱${amount.toLocaleString()}</div>
                    <div><strong>Interest:</strong> ${interest}%</div>
                    <div><strong>Term:</strong> ${term} Months</div>
                    <div><strong>Total Payable:</strong> ₱${total.toLocaleString()}</div>
                    <div><strong>Monthly Payment:</strong> ₱${monthly.toLocaleString()}</div>
                    <div><strong>Remaining Balance:</strong> ₱${remaining.toLocaleString()}</div>
                    <div><strong>Start Due Date:</strong> ${formatDate(duedate)}</div>
                    <div><strong>End Due Date:</strong> ${formatDate(endduedate)}</div>
                    <div><strong>Status:</strong> ${status}</div>`;

                modalEl.querySelector('#confirmDeleteLoanBtn').setAttribute('data-id', id);
                deleteModal.show();
            });

            $('#loansTable').on('click', '.payment-btn', function () {
                const row = $(this).closest('tr');
                const id = row.find('td').eq(0).text().trim();
                const borrower_id = row.find('td').eq(1).text().trim();
                const name = row.find('td').eq(2).text().trim();
                const monthly = parseFloat(row.find('td').eq(7).text().trim().replace(/[₱,]/g, ''));
                const remaining = parseFloat(row.find('td').eq(3).text().trim().replace(/[₱,]/g, ''));

                const duedate = row.find('td').eq(9).text().trim();
                const endduedate = row.find('td').eq(10).text().trim();
                const status = row.find('td').eq(11).text().trim();

                loanscontainer.style.display = 'flex';
                editloanform.style.display = "none";
                adjustpaymentForm.style.display = "flex";

                requestAnimationFrame(() => {
                    loanscontainer.classList.add('show');
                });

                document.querySelector('#edit-LoansForm .title').textContent = "Edit Loan ID : " + id;
                adjustpaymentForm.querySelector('input[name="loanID"]').value = id;
                adjustpaymentForm.querySelector('input[name="borrowerid"]').value = borrower_id;
                adjustpaymentForm.querySelector('input[name="FullName"]').value = name;
                adjustpaymentForm.querySelector('input[name="monthly"]').value = monthly;
                
                let remainingInput = adjustpaymentForm.querySelector('input[name="remaining"]');
                remainingInput.value = remaining;
                remainingInput.dataset.original = remaining;

                const paymentInput = adjustpaymentForm.querySelector('input[name="payment"]');
                paymentInput.removeEventListener('input', calculatePayment); // clean up if already bound
                paymentInput.addEventListener('input', calculatePayment);
            });

            function calculatePayment() {
                const form = adjustpaymentForm;
                const remainingInput = form.querySelector('input[name="remaining"]');
                const paymentInput = form.querySelector('input[name="payment"]');

                let originalRemaining = parseFloat(remainingInput.dataset.original);
                let payment = parseFloat(paymentInput.value);

                if (!isNaN(originalRemaining) && !isNaN(payment)) {
                    remainingInput.value = (originalRemaining - payment).toFixed(2);
                } else {
                    remainingInput.value = originalRemaining;
                }
            }


            document.getElementById('confirmDeleteLoanBtn').addEventListener('click', async function () {
                const borrowerId = this.getAttribute('data-id');
                console.log("Confirmed deletion of ID:", borrowerId);

                try {
                    const response = await fetch('/admin/deleteLoan', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'  // <-- Correct content type for JSON
                        },
                        body: JSON.stringify({ id: borrowerId })  // Send the data as JSON
                    });

                    const result = await response.json();

                    if (response.ok) {
                        console.log(result.message);
                        window.location.reload();
                        // Optionally remove the row from the table, show a toast, etc.
                    } else {
                        console.error(result.message);
                        alert("Failed to delete borrower: " + result.message);
                    }
                } catch (err) {
                    console.error("Error during fetch:", err);
                }

                // Hide modal
                const modalEl = document.getElementById('deleteModalCenter');
                const modal = bootstrap.Modal.getInstance(modalEl);
                modal.hide();
            });


            editloanform.querySelector('.close.btn').onclick = function() {
                loanscontainer.style.display = 'none';
                editloanform.style.display = "none";
                adjustpaymentForm.style.display = "none";
               
                requestAnimationFrame(() => {
                    loanscontainer.classList.remove('show');
                });
            };
            
            editloanform.addEventListener('submit', function(event) {
                event.preventDefault();  
                const formData = new FormData(this); 

                const status = document.getElementById("dropdownButtonStatus").textContent.trim();
                formData.append("status", status);

                const urlEncodedData = new URLSearchParams(formData).toString();

                fetch('/admin/addLoan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',  // Ensure proper content type
                    },
                    body: urlEncodedData  // Send data in URL-encoded format
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Loan updated successfully!') {
                        window.location.reload();
                    } else {
                        alert('Error editing loan');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred');
                }); 
            })
            
            adjustpaymentForm.addEventListener('submit', function(event) {
                event.preventDefault();  
                const formData = new FormData(this); 

                const status = document.getElementById("dropdownButtonStatus").textContent.trim();
                formData.append("status", status);

                const urlEncodedData = new URLSearchParams(formData).toString();

                fetch('/admin/payLoan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',  // Ensure proper content type
                    },
                    body: urlEncodedData  // Send data in URL-encoded format
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Loan payment successfully!') {
                        window.location.reload();
                    } else {
                        alert('Error editing loan');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred');
                }); 
            })

            adjustpaymentForm.querySelector('.close.btn').onclick = function() {
                loanscontainer.style.display = 'none';
                editloanform.style.display = "none";
                adjustpaymentForm.style.display = "none";
               
                requestAnimationFrame(() => {
                    loanscontainer.classList.remove('show');
                });
            };
            
            if (loans) {

                const dataTable = $('#loansTable').DataTable();

                // Clear existing data
                dataTable.clear();

                // Add new rows
                loans.forEach(Loans => {
                    dataTable.row.add([
                        Loans.id,
                        Loans.borrower_id,
                        Loans.full_name,
                        "₱" + Loans.amount,
                        Loans.interest + "%",
                        Loans.term + " Months",
                        "₱" + Loans.total,
                        "₱" + Loans.monthly,
                        "₱" + Loans.remaining,
                        new Date(Loans.due_date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
                        new Date(Loans.end_due_date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
                        Loans.status === 'Pending'
                        ? `<span class="badge rounded-pill text-bg-secondary" style="margin: 0; font-size: 10px;">Pending</span>`
                        : Loans.status === 'Approved'
                        ? `<span class="badge rounded-pill text-bg-success">Approved</span>`
                        : Loans.status === 'Rejected'
                        ? `<span class="badge rounded-pill text-bg-danger">Rejected</span>`
                        : `<span class="badge rounded-pill text-bg-warning">Unknown</span>`,
                        new Date(Loans.updated).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
                        `
                            <div class="action_table_btn">
                                <button type="button" class="payment-btn btn btn-sm btn-primary" style="font-size: 11px;"><svg class="w-[40px] h-[40px] text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="currentColor" viewBox="0 0 24 24">
                                    <path fill-rule="evenodd" d="M4 5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2H4Zm0 6h16v6H4v-6Z" clip-rule="evenodd"/>
                                    <path fill-rule="evenodd" d="M5 14a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm5 0a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2h-5a1 1 0 0 1-1-1Z" clip-rule="evenodd"/>
                                    </svg>
                                    Payment</button>
                                <button type="button" class="print-btn btn btn-sm btn-primary" style="font-size: 11px;">
                                    <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="currentColor" viewBox="0 0 24 24">
                                    <path fill-rule="evenodd" d="M8 3a2 2 0 0 0-2 2v3h12V5a2 2 0 0 0-2-2H8Zm-3 7a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h1v-4a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v4h1a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2H5Zm4 11a1 1 0 0 1-1-1v-4h8v4a1 1 0 0 1-1 1H9Z" clip-rule="evenodd"/>
                                    </svg>
                                    Print</button>
                                <button type="button" class="edit-btn btn btn-sm btn-success" style="font-size: 11px;"><svg class="w-[40px] h-[40px] text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="currentColor" viewBox="0 0 24 24">
                                    <path fill-rule="evenodd" d="M11.32 6.176H5c-1.105 0-2 .949-2 2.118v10.588C3 20.052 3.895 21 5 21h11c1.105 0 2-.948 2-2.118v-7.75l-3.914 4.144A2.46 2.46 0 0 1 12.81 16l-2.681.568c-1.75.37-3.292-1.263-2.942-3.115l.536-2.839c.097-.512.335-.983.684-1.352l2.914-3.086Z" clip-rule="evenodd"/>
                                    <path fill-rule="evenodd" d="M19.846 4.318a2.148 2.148 0 0 0-.437-.692 2.014 2.014 0 0 0-.654-.463 1.92 1.92 0 0 0-1.544 0 2.014 2.014 0 0 0-.654.463l-.546.578 2.852 3.02.546-.579a2.14 2.14 0 0 0 .437-.692 2.244 2.244 0 0 0 0-1.635ZM17.45 8.721 14.597 5.7 9.82 10.76a.54.54 0 0 0-.137.27l-.536 2.84c-.07.37.239.696.588.622l2.682-.567a.492.492 0 0 0 .255-.145l4.778-5.06Z" clip-rule="evenodd"/>
                                    </svg>
                                    Edit</button>
                                <button type="button" class="delete-btn btn btn-sm btn-danger" style="font-size: 11px;"><svg class="w-[40px] h-[40px] text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="currentColor" viewBox="0 0 24 24">
                                    <path fill-rule="evenodd" d="M8.586 2.586A2 2 0 0 1 10 2h4a2 2 0 0 1 2 2v2h3a1 1 0 1 1 0 2v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8a1 1 0 0 1 0-2h3V4a2 2 0 0 1 .586-1.414ZM10 6h4V4h-4v2Zm1 4a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Zm4 0a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Z" clip-rule="evenodd"/>
                                    </svg>
                                    Delete</button>
                            </div>   
                        `

                    ]);

                });

                // Redraw the table with new data
                dataTable.draw();

                // Re-initialize dropdowns (optional)
                $('.dropdown-toggle').dropdown();
            }


            if (role === 'Loan Officer') {
                // borrowerNav.parentElement.remove();
                // accountsNav.parentElement.remove();
            } else if (role === 'Cashier') {
                document.querySelectorAll("#loansTable .delete-btn").forEach(el => el.remove());
                document.querySelectorAll("#loansTable .edit-btn").forEach(el => el.remove());

            }
        } );
    </script>
</body>